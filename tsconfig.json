{
	"compilerOptions": {
		// 指定ECMAScript目标版本
		"target": "ES2020",
		"useDefineForClassFields": true,
		// 用于指定在导入默认导出时是否应将其转换为具名导出或命名空间导入
		"esModuleInterop": true,
		"allowSyntheticDefaultImports": true,
		"strictNullChecks": true,
		"forceConsistentCasingInFileNames": true,
		// 指定生成哪个模块系统代码
		"module": "ESNext",
		"lib": ["ES2020", "DOM", "DOM.Iterable"],
		// 忽略所有的声明文件（ *.d.ts）的类型检查
		"skipLibCheck": true,
		// 要包含的类型声明文件名列表
		"types": ["vite/client", "node"],

		/* Bundler mode */
		// 用于选择模块解析策略，有'node'和'classic'两种类型
		"moduleResolution": "bundler",
		"allowImportingTsExtensions": true,
		"resolveJsonModule": true,
		"isolatedModules": true,
		"noEmit": true,
		// 指定 jsx 代码的生成: 'preserve', 'react-native', or 'react'
		"jsx": "preserve",

		/* Linting */
		// 启用所有严格类型检查选项。
		// 启用 --strict相当于启用 --noImplicitAny, --noImplicitThis, --alwaysStrict，
		// --strictNullChecks和 --strictFunctionTypes和--strictPropertyInitialization。
		"strict": true,
		// 默认false,是否检测定义了但是没使用的变量
		"noUnusedLocals": true,
		// 用于检查是否有在函数体中没有使用的参数
		"noUnusedParameters": true,
		// 用于检查switch中是否有case没有使用break跳出switch
		"noFallthroughCasesInSwitch": true,
		// 解析非相对模块名的基准目录
		"baseUrl": ".",
		// 模块名到基于 baseUrl的路径映射的列表。
		"paths": {
			"@/*": ["src/*"]
		}
	},
	"include": [
		"types/**/*.d.ts",
		"types/**/*.ts",
		"build/**/*.ts",
		"build/**/*.d.ts",
		"uno.config.ts",
		"packages/**/*.vue",
		"packages/**/*.ts",
		"packages/**/*.d.ts",
		"packages/**/*.tsx",
		"packages/**/*/vite.config.ts"
	],
	"exclude": ["node_modules", "dist"],
	"references": [{ "path": "./tsconfig.node.json" }]
}
